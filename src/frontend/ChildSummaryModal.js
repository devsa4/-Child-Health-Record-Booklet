import React, { useState, useEffect, useRef } from "react";
import { Line } from "react-chartjs-2";
import { useNavigate } from "react-router-dom";
import { FaDownload, FaEdit } from "react-icons/fa";
import { jsPDF } from 'jspdf';

import { FaWhatsapp } from "react-icons/fa";
import {
    Chart as ChartJS,
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    Title,
    Tooltip,
    Legend,
    Filler
} from "chart.js";
import "./ChildSummaryModal.css";

// Register Chart.js components
ChartJS.register(
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    Title,
    Tooltip,
    Legend,
    Filler
);

function ChildSummaryModal({ child, onClose, onDelete, language }) {
    const [spinPhoto, setSpinPhoto] = useState(false);
    const modalRef = useRef(null);
    const [popupMessage, setPopupMessage] = useState("");
const [showPopup, setShowPopup] = useState(false);

    const [showWhatsappPopup, setShowWhatsappPopup] = useState(false);
const [whatsappNumber, setWhatsappNumber] = useState("");
const [whatsappLinkToOpen, setWhatsappLinkToOpen] = useState(null);

    const [showNutritionTips, setShowNutritionTips] = useState(false);
    const [showUniqueIdPopup, setShowUniqueIdPopup] = useState(false);
    const [uniqueIdInput, setUniqueIdInput] = useState("");
    const [modalLanguage, setModalLanguage] = useState(language);
    const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
    const [showInvalidIdPopup, setShowInvalidIdPopup] = useState(false);
    const [selectedMood, setSelectedMood] = useState(null);

    const navigate = useNavigate();

    // Use a unique key for the modal to reset state on child change
    useEffect(() => {
        setSpinPhoto(true);
        const timer = setTimeout(() => setSpinPhoto(false), 800);
        return () => clearTimeout(timer);
    }, [child]);

    useEffect(() => {
        if (showDeleteConfirm) {
            setTimeout(() => {
                document.querySelector(".popup-card")?.scrollIntoView({ behavior: "smooth", block: "center" });
            }, 100);
        }
    }, [showDeleteConfirm]);

    useEffect(() => {
        setModalLanguage(language);
    }, [language]);
    useEffect(() => {
    if (showWhatsappPopup && modalRef.current) {
        modalRef.current.scrollIntoView({ behavior: "smooth", block: "center" });
    }
}, [showWhatsappPopup]);

useEffect(() => {
    if (showUniqueIdPopup && modalRef.current) {
        modalRef.current.scrollIntoView({ behavior: "smooth", block: "center" });
    }
}, [showUniqueIdPopup]);

useEffect(() => {
    if (showDeleteConfirm && modalRef.current) {
        modalRef.current.scrollIntoView({ behavior: "smooth", block: "center" });
    }
}, [showDeleteConfirm]);

useEffect(() => {
    if (showInvalidIdPopup && modalRef.current) {
        modalRef.current.scrollIntoView({ behavior: "smooth", block: "center" });
    }
}, [showInvalidIdPopup]);

useEffect(() => {
    if (showWhatsappPopup) {
        const modalContent = document.getElementById("modal-content-to-print");
        const popup = document.querySelector(".whatsapp-popup-card");
        if (modalContent && popup) {
            // Calculate vertical center relative to modal
            const modalRect = modalContent.getBoundingClientRect();
            const popupRect = popup.getBoundingClientRect();
            const scrollTop = popup.offsetTop - (modalRect.height / 2) + (popupRect.height / 2);
            modalContent.scrollTo({ top: scrollTop, behavior: "smooth" });
        }
    }
}, [showWhatsappPopup]);

    // Data for charts including historical records
    const allRecords = [...(child.history || []), { date: new Date().toLocaleDateString('en-GB'), weight: child.weight, height: child.height }];

    const weightData = {
        labels: allRecords.map(record => record.date),
        datasets: [
            {
                label: "Child Weight (kg)",
                data: allRecords.map(record => record.weight),
                borderColor: "blue",
                backgroundColor: "rgba(0,0,255,0.2)",
                fill: true
            },
            {
                label: "Average Weight (kg)",
                data: allRecords.map((_, index) => {
                    // This is a simplified average. A real-world app would use age-specific growth charts.
                    return 10 + (child.age - (allRecords.length - 1 - index)) * 2;
                }),
                borderColor: "red",
                borderDash: [5, 5]
            }
        ]
    };

    const heightData = {
        labels: allRecords.map(record => record.date),
        datasets: [
            {
                label: "Child Height (cm)",
                data: allRecords.map(record => record.height),
                borderColor: "green",
                backgroundColor: "rgba(0,255,0,0.2)",
                fill: true
            },
            {
                label: "Average Height (cm)",
                data: allRecords.map((_, index) => {
                    // Simplified average
                    return 70 + (child.age - (allRecords.length - 1 - index)) * 7;
                }),
                borderColor: "orange",
                borderDash: [5, 5]
            }
        ]
    };

    // Translations for multiple languages
    const translations = {
        en: {
            download: "Download Record",
            delete: "Delete Record",
            update: "Update Record",
            confirmDelete: "Are you sure you want to delete this child's record? This action cannot be undone.",
            enterId: "Enter Unique ID",
            promptId: "Please enter the unique ID to download the record.",
            invalidId: "Invalid Unique ID.",
            close: "Close",
            yes: "Yes",
            no: "No",
            uniqueId: "Unique ID",
            moodLabel: "Select Child's Mood Today:",
            age: "Age",
            gender: "Gender",
            guardian: "Guardian",
            weight: "Weight",
            height: "Height",
            illness: "Recent Illness",
            malnutrition: "Visible Signs of Malnutrition",
            healthy: "Healthy",
            improving: "Improving",
           
            attention: "Needs Attention",
            healthyMessage: "‚úÖ Your child‚Äôs growth is on track. Keep it up!",
            alertMessage: "‚ö†Ô∏è Please consult a health professional for guidance.",
            encouragement1: "üéâ Small efforts lead to big outcomes ‚Äî you're building a healthy future.",
            encouragement2: "‚ö†Ô∏è Some signs of malnutrition were detected. You're taking the right step by monitoring closely.",
            encouragement3: "üë©‚Äç‚öïÔ∏è Consider consulting a health professional for personalized guidance.",
            weightProgress: "Weight Progress",
            heightProgress: "Height Progress",
            futureGrowth: "Future Growth: Together, we build a healthier future. üå±",
            guardianName: "Parents/Guardian‚Äôs Name",
            whatsapp: "Send On WhatsApp",
            tips: " üçé See Nutrition Tips",
            green: "ü•¶ Add more green vegetables to meals.",
      milk: "ü•õ Ensure at least 2 glasses of milk per day.",
      vitamin: "üçä Include vitamin-rich fruits like oranges & papaya.",
      protein: "ü•ö Add protein sources: eggs, beans, pulses.",
      hydrate: "üíß Keep your child hydrated throughout the day.",
      nutritiontips: "Nutrition Tips",
            updateTimeline: "Update Record to see the timeline of the progress.",
            chartSubtitle: "This chart tracks your child's growth over time.",
            recommendationsTitle: "Actionable Recommendations",
            noRecs: "Great job! Keep up the good work on monitoring your child's growth.",
            lowWeightRec: "Consider adding more protein and calorie-rich foods like lentils, eggs, and nuts to support healthy weight gain.",
            lowHeightRec: "Ensure your child is getting enough calcium and Vitamin D from sources like milk, fortified cereals, and sunlight to support bone growth.",
            illnessRec: "Remember to follow the doctor's instructions for any recent illness. Adequate rest and hydration are crucial for recovery.",
            malnutritionRec: "It's vital to follow a healthcare professional's advice. Regular check-ups are highly recommended.",
            malnutritionEncouragement: "Remember that every step you take to provide nutritious food and care makes a huge difference. You're doing a great job!"
        },
        hi: {
            download: "‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
            delete: "‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§π‡§ü‡§æ‡§è‡§Å",
            update: "‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",
            nutritiontips: "‡§™‡•ã‡§∑‡§£ ‡§∏‡•Å‡§ù‡§æ‡§µ",
            confirmDelete: "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§µ‡§æ‡§ï‡§à ‡§á‡§∏ ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡§æ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§π‡§ü‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? ‡§Ø‡§π ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§™‡•Ç‡§∞‡•ç‡§µ‡§µ‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡•Ä ‡§ú‡§æ ‡§∏‡§ï‡§§‡•Ä‡•§",
            enterId: "‡§Ö‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø ‡§Ü‡§à‡§°‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
            promptId: "‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø ‡§Ü‡§à‡§°‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§",
           
            close: "‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
            tips: " üçé ‡§™‡•ã‡§∑‡§£ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•á‡§ñ‡•á‡§Ç",
            green: "ü•¶ ‡§≠‡•ã‡§ú‡§® ‡§Æ‡•á‡§Ç ‡§Ö‡§ß‡§ø‡§ï ‡§π‡§∞‡•Ä ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡§æ‡§Å ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§",
            milk: "ü•õ ‡§¶‡§ø‡§® ‡§Æ‡•á‡§Ç ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 2 ‡§ó‡§ø‡§≤‡§æ‡§∏ ‡§¶‡•Ç‡§ß ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
            vitamin: "üçä ‡§∏‡§Ç‡§§‡§∞‡•á ‡§î‡§∞ ‡§™‡§™‡•Ä‡§§‡§æ ‡§ú‡•à‡§∏‡•á ‡§µ‡§ø‡§ü‡§æ‡§Æ‡§ø‡§® ‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§´‡§≤ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§",
            protein: "ü•ö ‡§™‡•ç‡§∞‡•ã‡§ü‡•Ä‡§® ‡§∏‡•ç‡§∞‡•ã‡§§ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç: ‡§Ö‡§Ç‡§°‡•á, ‡§¨‡•Ä‡§®‡•ç‡§∏, ‡§¶‡§æ‡§≤‡•á‡§Ç‡•§",
            hydrate: "üíß ‡§™‡•Ç‡§∞‡•á ‡§¶‡§ø‡§® ‡§Ö‡§™‡§®‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•ã ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§ñ‡•á‡§Ç‡•§",
            invalidId: "‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Ö‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø ‡§Ü‡§à‡§°‡•Ä‡•§",
            yes: "‡§π‡§æ‡§Å",
            whatsapp: "‡§µ‡•ç‡§π‡§æ‡§ü‡•ç‡§∏‡§è‡§™ ‡§™‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç",
            updateTimelie: "‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§ï‡•Ä ‡§∏‡§Æ‡§Ø‡§∞‡•á‡§ñ‡§æ ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§",
            no: "‡§®‡§π‡•Ä‡§Ç",
            uniqueId: "‡§Ö‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø ‡§Ü‡§à‡§°‡•Ä",
            moodLabel: "‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡§æ ‡§Æ‡•Ç‡§° ‡§ö‡•Å‡§®‡•á‡§Ç:",
            age: "‡§â‡§Æ‡•ç‡§∞",
            gender: "‡§≤‡§ø‡§Ç‡§ó",
            guardian: "‡§Ö‡§≠‡§ø‡§≠‡§æ‡§µ‡§ï",
            weight: "‡§µ‡§ú‡§º‡§®",
            height: "‡§ï‡§¶",
            illness: "‡§π‡§æ‡§≤ ‡§ï‡•Ä ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä",
            malnutrition: "‡§ï‡•Å‡§™‡•ã‡§∑‡§£ ‡§ï‡•á ‡§¶‡•É‡§∂‡•ç‡§Ø ‡§∏‡§Ç‡§ï‡•á‡§§",
            healthy: "‡§∏‡•ç‡§µ‡§∏‡•ç‡§•",
            improving: "‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à",
            attention: "‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§®‡•á ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ",
            healthyMessage: "‚úÖ ‡§Ü‡§™‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•Ä ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø ‡§∏‡§π‡•Ä ‡§¶‡§ø‡§∂‡§æ ‡§Æ‡•á‡§Ç ‡§π‡•à‡•§ ‡§á‡§∏‡•Ä ‡§§‡§∞‡§π ‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡§§‡•á ‡§∞‡§π‡•á‡§Ç!",
            alertMessage: "‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡§ø‡§∏‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§",
            encouragement1: "üéâ ‡§õ‡•ã‡§ü‡•á ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§¨‡§°‡§º‡•á ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§≤‡§æ‡§§‡•á ‡§π‡•à‡§Ç ‚Äî ‡§Ü‡§™ ‡§è‡§ï ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§¨‡§®‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§",
            encouragement2: "‚ö†Ô∏è ‡§ï‡•Å‡§õ ‡§ï‡•Å‡§™‡•ã‡§∑‡§£ ‡§ï‡•á ‡§∏‡§Ç‡§ï‡•á‡§§ ‡§™‡§æ‡§è ‡§ó‡§è ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™ ‡§∏‡§π‡•Ä ‡§ï‡§¶‡§Æ ‡§â‡§†‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§",
            encouragement3: "üë©‚Äç‚öïÔ∏è ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡§≤‡§æ‡§π ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§∏‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§",
            weightProgress: "‡§µ‡§ú‡§º‡§® ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø",
            heightProgress: "‡§ï‡§¶ ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø",
            futureGrowth: "‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§ï‡•Ä ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø: ‡§∏‡§æ‡§• ‡§Æ‡§ø‡§≤‡§ï‡§∞, ‡§π‡§Æ ‡§è‡§ï ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§¨‡§®‡§æ‡§§‡•á ‡§π‡•à‡§Ç‡•§ üå±",
            guardianName: "‡§Ö‡§≠‡§ø‡§≠‡§æ‡§µ‡§ï ‡§ï‡§æ ‡§®‡§æ‡§Æ",
            chartSubtitle: "‡§Ø‡§π ‡§ö‡§æ‡§∞‡•ç‡§ü ‡§Ü‡§™‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•Ä ‡§∏‡§Æ‡§Ø ‡§ï‡•á ‡§∏‡§æ‡§• ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø ‡§ï‡•ã ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§",
            recommendationsTitle: "‡§ï‡§æ‡§∞‡•ç‡§Ø‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§∏‡•Å‡§ù‡§æ‡§µ",
            noRecs: "‡§¨‡§π‡•Å‡§§ ‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ! ‡§Ö‡§™‡§®‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•Ä ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø ‡§™‡§∞ ‡§®‡§ú‡§º‡§∞ ‡§∞‡§ñ‡§®‡§æ ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç‡•§",
            lowWeightRec: "‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§µ‡§ú‡§º‡§® ‡§¨‡§¢‡§º‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§¶‡§æ‡§≤‡•ã‡§Ç, ‡§Ö‡§Ç‡§°‡•ã‡§Ç ‡§î‡§∞ ‡§Æ‡•á‡§µ‡•ã‡§Ç ‡§ú‡•à‡§∏‡•á ‡§™‡•ç‡§∞‡•ã‡§ü‡•Ä‡§® ‡§î‡§∞ ‡§ï‡•à‡§≤‡•ã‡§∞‡•Ä ‡§∏‡•á ‡§≠‡§∞‡§™‡•Ç‡§∞ ‡§ñ‡§æ‡§¶‡•ç‡§Ø ‡§™‡§¶‡§æ‡§∞‡•ç‡§• ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§",
            lowHeightRec: "‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•ã ‡§¶‡•Ç‡§ß ‡§î‡§∞ ‡§π‡§∞‡•Ä ‡§™‡§§‡•ç‡§§‡•á‡§¶‡§æ‡§∞ ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡•ã‡§Ç ‡§ú‡•à‡§∏‡•á ‡§∏‡•ç‡§∞‡•ã‡§§‡•ã‡§Ç ‡§∏‡•á ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§ï‡•à‡§≤‡•ç‡§∂‡§ø‡§Ø‡§Æ ‡§î‡§∞ ‡§µ‡§ø‡§ü‡§æ‡§Æ‡§ø‡§® ‡§°‡•Ä ‡§Æ‡§ø‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à‡•§",
            illnessRec: "‡§π‡§æ‡§≤ ‡§ï‡•Ä ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•á ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡•ã‡§Ç ‡§ï‡§æ ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡§®‡§æ ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç‡•§ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§Ü‡§∞‡§æ‡§Æ ‡§î‡§∞ ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§∂‡§® ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡§Ç‡•§",
            malnutritionRec: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§ï‡§æ ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡§®‡§æ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡•§ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§¶‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡•§",
            malnutritionEncouragement: "‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç ‡§ï‡§ø ‡§™‡•å‡§∑‡•ç‡§ü‡§ø‡§ï ‡§≠‡•ã‡§ú‡§® ‡§î‡§∞ ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™ ‡§ú‡•ã ‡§≠‡•Ä ‡§ï‡§¶‡§Æ ‡§â‡§†‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç, ‡§µ‡§π ‡§¨‡§π‡•Å‡§§ ‡§¨‡§°‡§º‡§æ ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§≤‡§æ‡§è‡§ó‡§æ‡•§ ‡§Ü‡§™ ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§ï‡§æ‡§Æ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç!"
        }
    };

    const t = translations[modalLanguage];

    // Functions for downloading, deleting, and updating
    const handleDownloadClick = () => setShowUniqueIdPopup(true);

    const handleUniqueIdSubmit = async (e) => {
        e.preventDefault();
        const childIdKey = child.child_id || child._id || child.id;

        if (uniqueIdInput === String(childIdKey)) {
            setShowUniqueIdPopup(false);
            setUniqueIdInput("");

            setTimeout(async () => {
                const pdf = new jsPDF({ orientation: 'portrait', unit: 'in', format: 'letter' });
                let y = 0.5;

                pdf.setFont("helvetica", "bold");
                pdf.setFontSize(22);
                pdf.text("GROWTH GUARDIAN", 4.25, y, { align: 'center' });
                y += 0.3;

                pdf.setFont("helvetica", "italic");
                pdf.setFontSize(10);
                pdf.text("Empowering every child's journey", 4.25, y, { align: 'center' });
                y += 0.5;
                pdf.setFont("helvetica", "normal");

                // Add child photo if available
                if (child.photo) {
                    try {
                        const response = await fetch(child.photo);
                        const blob = await response.blob();
                        const reader = new FileReader();
                        reader.readAsDataURL(blob);
                        reader.onloadend = () => {
                            const base64data = reader.result;
                            const imgSize = 1.5;
                            pdf.addImage(base64data, 'JPEG', 4.25 - imgSize / 2, y, imgSize, imgSize);
                            y += imgSize + 0.3;
                            generatePdfContent(pdf, y, t);
                        };
                    } catch (error) {
                        console.error("Failed to load image for PDF:", error);
                        generatePdfContent(pdf, y, t);
                    }
                } else {
                    generatePdfContent(pdf, y, t);
                }
            }, 800);
        } else {
            setShowInvalidIdPopup(true);
        }
    };

    const generatePdfContent = (pdf, y, t) => {
        // Child details section
        pdf.setFontSize(16);
        pdf.text("Child Record", 4.25, y, { align: 'center' });
        y += 0.3;
        pdf.line(0.5, y, 8.0, y);
        y += 0.3;

        pdf.setFontSize(12);
        const details = [
            `${t.uniqueId}: ${child.child_id || child._id || child.id}`,
            `Name: ${child.name}`,
            `${t.guardianName}: ${child.guardian}`,
            `${t.age}: ${child.age} years`,
            `${t.gender}: ${child.gender}`,
            `${t.weight}: ${child.weight} kg`,
            `${t.height}: ${child.height} cm`,
            `${t.illness}: ${child.illnesses || "None"}`,
            `${t.malnutrition}: ${child.malnutrition?.hasSigns === "yes" ? child.malnutrition.details : "No"}`
        ];

        details.forEach(line => {
            pdf.text(line, 0.7, y);
            y += 0.25;
        });
        y += 0.3;

        // Progress status section
        pdf.setFontSize(16);
        pdf.text("Progress Status", 4.25, y, { align: 'center' });
        y += 0.3;
        pdf.line(0.5, y, 8.0, y);
        y += 0.3;

        const encouragement = getActionableRecommendations(child, translations[modalLanguage]);
        pdf.setFontSize(12);
        encouragement.forEach(text => {
            const splitText = pdf.splitTextToSize(text, 7.5);
            pdf.text(splitText, 0.7, y);
            y += (splitText.length * 0.25) + 0.1;
        });

        pdf.save(`${child.name}_Record.pdf`);
    };

    const handleAddRecordClick = () => navigate(`/add-record/${child.id || child._id || child.child_id}`);
    const handleDeleteClick = () => setShowDeleteConfirm(true);
    const confirmDelete = async () => {
        const childIdKey = child?.child_id || child?._id || child?.id;
        if (!childIdKey) {
            console.error("‚ùå Child ID not found!");
            return;
        }
        try {
            const res = await fetch(`/child/${childIdKey}`, { method: "DELETE" });
            if (!res.ok) throw new Error("‚ùå Failed to delete record from cloud");
            onDelete(childIdKey);
            setShowDeleteConfirm(false);
        } catch (err) {
            console.error("üî¥ Delete error:", err);
        }
    };
    const cancelDelete = () => setShowDeleteConfirm(false);

  const getProgressStatusKey = () => {
  const avgWeight = 10 + child.age * 2;
  const avgHeight = 70 + child.age * 7;

  // If malnutrition signs present ‚Üí Attention
  if (child.malnutrition?.hasSigns === "yes") return "attention";

  // If no illness & no malnutrition ‚Üí Healthy
  if ((!child.illnesses || child.illnesses.toLowerCase() === "N/A"||child.illnesses.toLowerCase() === "Skip") &&
      (!child.malnutrition || child.malnutrition.hasSigns !== "yes")) {
    return "healthy";
  }

  // Otherwise check growth progress
  if (child.weight >= avgWeight && child.height >= avgHeight) return "healthy";

  return "improving";
};

    const progressStatusKey = getProgressStatusKey();

    // New function for actionable recommendations, including encouragement messages
    const getActionableRecommendations = (child, t) => {
        const recommendations = [];
        const avgWeight = 10 + child.age * 2;
        const avgHeight = 70 + child.age * 7;

        if (child.malnutrition?.hasSigns === "yes") {
            recommendations.push(t.malnutritionRec);
            recommendations.push(t.malnutritionEncouragement);
            recommendations.push(t.encouragement2); // Added general encouragement for malnutrition
            recommendations.push(t.encouragement3); // Added professional advice encouragement
        } else {
            if (child.weight < avgWeight * 0.95) {
                recommendations.push(t.lowWeightRec);
            }
    
            if (child.height < avgHeight * 0.95) {
                recommendations.push(t.lowHeightRec);
            }
            
            if (child.illnesses) {
                recommendations.push(t.illnessRec);
            }

            if (recommendations.length > 0) {
                 recommendations.unshift(t.encouragement1); // Add a general encouragement message at the beginning
            }
        }


        if (recommendations.length === 0) {
            recommendations.push(t.noRecs);
        }

        return recommendations;
    };
    
    const recommendations = getActionableRecommendations(child, t);


const handleWhatsappShare = async () => {
    if (!whatsappNumber) {
        setPopupMessage(modalLanguage === "en" ? 
            "Please enter a valid phone number." : 
            "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§´‡§º‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§"
        );
        setShowPopup(true);
        return;
    }

    const weightEmoji = "‚öñÔ∏è";
    const heightEmoji = "üìè";
    const malnutritionEmoji = "‚ö†Ô∏è";
    const heartEmoji = "üíñ";
    const smileEmoji = "üòä";
    const phoneEmoji = "üì≤";

    const recsEn = recommendations.map((rec) => `‚Ä¢ ${rec}`).join("\n");
    const recsHi = recommendations.map((rec) => {
        if (rec === t.lowWeightRec) return "‚Ä¢ ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§µ‡§ú‡§º‡§® ‡§¨‡§¢‡§º‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡•ã‡§ü‡•Ä‡§® ‡§î‡§∞ ‡§ï‡•à‡§≤‡•ã‡§∞‡•Ä ‡§∏‡•á ‡§≠‡§∞‡§™‡•Ç‡§∞ ‡§≠‡•ã‡§ú‡§® ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§";
        if (rec === t.lowHeightRec) return "‚Ä¢ ‡§π‡§°‡•ç‡§°‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§ï‡•à‡§≤‡•ç‡§∂‡§ø‡§Ø‡§Æ ‡§î‡§∞ ‡§µ‡§ø‡§ü‡§æ‡§Æ‡§ø‡§® ‡§°‡•Ä ‡§≤‡•á‡§Ç‡•§";
        if (rec === t.illnessRec) return "‚Ä¢ ‡§π‡§æ‡§≤ ‡§ï‡•Ä ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•á ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡•ã‡§Ç ‡§ï‡§æ ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§Ü‡§∞‡§æ‡§Æ ‡§î‡§∞ ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§∂‡§® ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä‡•§";
        if (rec === t.malnutritionRec) return "‚Ä¢ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§ï‡§æ ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡•á‡§Ç‡•§";
        if (rec === t.malnutritionEncouragement) return "‚Ä¢ ‡§™‡•å‡§∑‡•ç‡§ü‡§ø‡§ï ‡§≠‡•ã‡§ú‡§® ‡§î‡§∞ ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§∏‡•á ‡§¨‡§°‡§º‡§æ ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§Ü‡§§‡§æ ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç!";
        if (rec === t.encouragement1) return "‚Ä¢ ‡§õ‡•ã‡§ü‡•á ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§¨‡§°‡§º‡•á ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§≤‡§æ‡§§‡•á ‡§π‡•à‡§Ç ‚Äî ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ ‡§ï‡§æ‡§Æ!";
        if (rec === t.encouragement2) return "‚Ä¢ ‡§ï‡•Å‡§™‡•ã‡§∑‡§£ ‡§ï‡•á ‡§∏‡§Ç‡§ï‡•á‡§§ ‡§Æ‡§ø‡§≤‡•á? ‡§∏‡§π‡•Ä ‡§ï‡§¶‡§Æ ‡§â‡§†‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§";
        if (rec === t.encouragement3) return "‚Ä¢ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡§≤‡§æ‡§π ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§";
        return `‚Ä¢ ${rec}`;
    }).join("\n");

    const fullMsg = `
${heartEmoji} *Greetings from _Growth Guardian_! This is your child's growth report!* ${phoneEmoji}

${smileEmoji} Child: ${child.name}
${weightEmoji} Weight: ${child.weight} kg
${heightEmoji} Height: ${child.height} cm
${malnutritionEmoji} Malnutrition: ${child.malnutrition?.hasSigns || "No"}

üåü Recommendations:
${recsEn}

*_‡§ó‡•ç‡§∞‡•ã‡§• ‡§ó‡§æ‡§∞‡•ç‡§ú‡§ø‡§Ø‡§®_ ‡§ï‡•Ä ‡§ì‡§∞ ‡§∏‡•á ‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Ø‡§π ‡§Ü‡§™‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•Ä ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§π‡•à!* ${phoneEmoji}

${smileEmoji} ‡§¨‡§ö‡•ç‡§ö‡§æ: ${child.name}
${weightEmoji} ‡§µ‡§ú‡§º‡§®: ${child.weight} kg
${heightEmoji} ‡§ï‡§¶: ${child.height} cm
${malnutritionEmoji} ‡§ï‡•Å‡§™‡•ã‡§∑‡§£: ${child.malnutrition?.hasSigns || "‡§®‡§π‡•Ä‡§Ç"}

üåü ‡§∏‡•Å‡§ù‡§æ‡§µ:
${recsHi}
`.trim();

    try {
        await navigator.clipboard.writeText(fullMsg);
        
        setShowPopup(true);
        window.open(`https://wa.me/${whatsappNumber}`, "_blank");
    } catch (err) {
        setPopupMessage(modalLanguage === "en" ? 
            "Failed to copy message. Please try manually." : 
            "‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ï‡•â‡§™‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§Ü‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•à‡§®‡•ç‡§Ø‡•Å‡§Ö‡§≤ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§"
        );
        setShowPopup(true);
        window.open(`https://wa.me/${whatsappNumber}`, "_blank");
    }

    setShowWhatsappPopup(false);
    setWhatsappNumber("");
};


    return (
        
        <div className="modal-overlay" onClick={onClose}>
         <div className="modal-content animate-popup" ref={modalRef} style={{ position: 'relative' }} onClick={(e) => e.stopPropagation()}>
<div className="modal-buttons-top" style={{ display: "flex", justifyContent: "center", gap: "1rem", position: "relative" }}>
   
                    <button className="modal-close" onClick={onClose}>‚úñ</button>
                    <button className="modal-download-btn" onClick={handleDownloadClick}>
                        <FaDownload style={{ marginRight: "6px" }} /> {t.download}
                    </button>
                </div>

                {child.photo && (
                    <div className="child-photo-wrapper">
                        <img src={child.photo} alt={child.name || "Child"} className={`child-photo ${spinPhoto ? "spin-photo" : ""}`} />
                    </div>
                )}
                
                <h2>{child.name}</h2>
                <div className="section-divider"></div>
                <div className={`progress-badge ${progressStatusKey}`}>
                    {t[progressStatusKey]}
                </div>
                <p className="unique-id-label"><strong>{t.uniqueId}:</strong> {child.child_id || child._id || child.id}</p>
                <div className="language-toggle">
                    <button onClick={() => setModalLanguage(modalLanguage === "en" ? "hi" : "en")}>
                        {modalLanguage === "en" ? "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§™‡§¢‡§º‡§ø‡§è" : "Read in English"}
                    </button>
                </div>

                <div className="gradient-card">
                    <div className="mood-tracker">
                        <label className="mood-label">{t.moodLabel}</label>
                        <div className="mood-options">
                            {["üòä", "üòê", "üò¢"].map((emoji) => (
                                <button
                                    key={emoji}
                                    className={`mood-btn ${selectedMood === emoji ? "selected" : ""}`}
                                    onClick={() => setSelectedMood(emoji)}
                                >
                                    {emoji}
                                </button>
                            ))}
                        </div>
                    </div>
                    
                    <p><strong>{t.guardianName}:</strong> <span className="field-value">{child.guardian}</span></p>
                    <p><strong>{t.age}:</strong> <span className="field-value">{child.age} years</span></p>
                    <p><strong>{t.gender}:</strong> <span className="field-value">{child.gender}</span></p>
                    <p><strong>{t.weight}:</strong> <span className="field-value">{child.weight} kg</span></p>
                    <p><strong>{t.height}:</strong> <span className="field-value">{child.height} cm</span></p>
                    <p><strong>{t.illness}:</strong> <span className="field-value">{child.illnesses || "None"}</span></p>
                   {(() => {
  const hasMalnutrition =
    child.malnutrition?.hasSigns &&
    String(child.malnutrition.hasSigns).toLowerCase() === "yes";

  return (
    <p>
      <strong>{t.malnutrition}:</strong>
      <span className="field-value">
        {hasMalnutrition ? child.malnutrition.details : "No"}
      </span>
    </p>
  );
})()}

                </div>
<div className="share-buttons" style={{ position: "relative", display: "inline-block" }}>
  <button
      className="whatsapp-btn"
      onClick={() => setShowWhatsappPopup(true)}
  >
      <FaWhatsapp style={{ marginRight: "6px" }} /> {t.whatsapp}
  </button>
{showWhatsappPopup && (
  <div
    className="whatsapp-popup-card"
    style={{
      position: "absolute",
      top: "-110%", // places it above the button
      left: "50%",
      transform: "translateX(-50%)",
      background: "#fff",
      padding: "1.5rem",
      borderRadius: "12px",
      width: "300px",
      textAlign: "center",
      boxShadow: "0 4px 12px rgba(0,0,0,0.2)",
      zIndex: 10,
    }}
  >
    <h2>{modalLanguage === "en" ? "Enter WhatsApp Number" : "‡§µ‡•ç‡§π‡§æ‡§ü‡•ç‡§∏‡§è‡§™ ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç"}</h2>
    <input
      type="text"
      value={whatsappNumber}
      onChange={(e) => setWhatsappNumber(e.target.value)}
      placeholder={modalLanguage === "en" ? "eg. 919550456805" : "eg. 919550456805"}
      style={{ padding: "0.5rem", width: "80%", margin: "1rem 0" }}
    />

    {/* Message below input field */}
    <div
      style={{
        fontSize: "0.9rem",
        color: "#555",
        marginBottom: "1rem",
      }}
    >
      {modalLanguage === "en"
        ? "The message will be automatically copied"
        : "‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ï‡•â‡§™‡•Ä ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ"}
    </div>

    {/* Buttons */}
    <div style={{ display: "flex", justifyContent: "center", gap: "0.5rem" }}>
      <button
        onClick={handleWhatsappShare}
        style={{
          backgroundColor: "#25D366",
          color: "#fff",
          border: "none",
          padding: "0.6rem 1.2rem",
          borderRadius: "6px",
          cursor: "pointer",
          fontWeight: "600",
          display: "flex",
          alignItems: "center"
        }}
      >
        <FaWhatsapp style={{ marginRight: "6px" }} /> {modalLanguage === "en" ? "Send" : "‡§≠‡•á‡§ú‡•á‡§Ç"}
      </button>
      <button
        onClick={() => setShowWhatsappPopup(false)}
        style={{
          backgroundColor: "#dc2626",
          color: "#fff",
          border: "none",
          padding: "0.6rem 1.2rem",
          borderRadius: "6px",
          cursor: "pointer",
          fontWeight: "600"
        }}
      >
        {modalLanguage === "en" ? "Cancel" : "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç"}
      </button>
    </div>
  </div>
)}

</div>


{/* Encouragement Section */}
<div className="encouragement-container">
  {recommendations
    .filter(
      rec => rec.startsWith("üéâ") || rec.startsWith("‚ö†Ô∏è") || rec.startsWith("üë©‚Äç‚öïÔ∏è")
    )
    .map((enc, index) => {
      // Split encouragement into first line + rest
      const [firstLine, ...rest] = enc.split("\n");

      // Decide color for first line
      let firstLineColor = "#1e40af"; // default blue
      if (firstLine.startsWith("‚ö†Ô∏è")) {
        firstLineColor = "red";
      } else if (firstLine.startsWith("üéâ")) {
        firstLineColor = "green";
      }

      return (
        <div key={index} className="encouragement-text">
          <p>
            <span style={{ color: firstLineColor }}>{firstLine}</span>
            {rest.length > 0 && (
              <>
                <br />
                <span style={{ color: "#1e40af" }}>{rest.join(" ")}</span>
              </>
            )}
          </p>
        </div>
      );
    })}
</div>
         <div className="recommendations-container">
    <h3>{t.recommendationsTitle}</h3>
    <ul className="recommendations-list">
        {recommendations
            .filter(rec => !rec.startsWith("üéâ") && !rec.startsWith("‚ö†Ô∏è") && !rec.startsWith("üë©‚Äç‚öïÔ∏è"))
            .map((rec, index) => (
                <li key={index} className="recommendation-item">
                    <span className="recommendation-icon">üí°</span> {rec}
                </li>
            ))}
    </ul>
  {/* See Nutrition Tips Button */}
  <button
    className="nutrition-tips-btn"
    onClick={() => setShowNutritionTips(true)}
  >
<h7>{t.tips}</h7>
  </button>
</div>
{showNutritionTips && (
  <div className="nutrition-tips-card">
    <h4>{t.nutritiontips}</h4>
    <ul>
    <div>{t.green}</div>
<div>{t.milk}</div>
<div>{t.vitamin}</div>
<div>{t.protein}</div>
<div>{t.hydrate}</div>
    </ul>
    <button
      className="close-tips-btn"
      onClick={() => setShowNutritionTips(false)}
    >
      <div>{t.close}</div>
    </button>
  </div>
)}

                {/* Historical Data Trends Graphs */}
          <h3>{t.weightProgress}</h3>
<p style={{ fontStyle: "italic", color: "#555555a2", marginBottom: "0.5rem", fontSize: "0.9rem" }}>
  {modalLanguage === "en"
    ? "(Update Record to see the timeline of the progress)."
    : "(‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§ï‡§æ ‡§ü‡§æ‡§á‡§Æ‡§≤‡§æ‡§á‡§® ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§)"}
</p>
<div className="graph-wrapper">
    <Line data={weightData} height={300} options={{ maintainAspectRatio: false }} />
</div>

<h3>{t.heightProgress}</h3>
<p style={{ fontStyle: "italic", color: "#555555a2", marginBottom: "0.5rem", fontSize: "0.9rem" }}>
  {modalLanguage === "en"
    ? "(Update Record to see the timeline of the progress)."
    : "(‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§ï‡§æ ‡§ü‡§æ‡§á‡§Æ‡§≤‡§æ‡§á‡§® ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§)"}
</p>
<div className="graph-wrapper">
    <Line data={heightData} height={300} options={{ maintainAspectRatio: false }} />
</div>

<div className="modal-actions">
    <button className="delete-button" onClick={handleDeleteClick}>{t.delete}</button>
    <button className="update-card-btn" onClick={handleAddRecordClick}>
        <FaEdit style={{ marginRight: "6px" }} /> {t.update}
    </button>
</div>

<div className="footer-message">
    <p><strong>{t.futureGrowth}</strong> </p>
</div>


                {/* Popups for Unique ID and Deletion */}
                {showUniqueIdPopup && (
                    <div className="unique-id-modal-overlay" onClick={() => setShowUniqueIdPopup(false)}>
                        <div className="unique-id-modal-content" onClick={(e) => e.stopPropagation()}>
                            <button className="unique-id-modal-close" onClick={() => setShowUniqueIdPopup(false)}>‚úñ</button>
                            <form onSubmit={handleUniqueIdSubmit}>
                                <h2>{t.enterId}</h2>
                                <p>{t.promptId}</p>
                                <input
                                    type="text"
                                    value={uniqueIdInput}
                                    onChange={(e) => setUniqueIdInput(e.target.value)}
                                    placeholder={t.uniqueId}
                                    required
                                />
                                <button type="submit" className="unique-id-modal-submit">{t.download}</button>
                            </form>
                        </div>
                    </div>
                )}
                {showInvalidIdPopup && (
                    <div className="unique-id-modal-overlay" onClick={() => setShowInvalidIdPopup(false)}>
                        <div className="invalid-id-modal-content" onClick={(e) => e.stopPropagation()}>
                            <h2>{t.invalidId}</h2>
                            <button onClick={() => setShowInvalidIdPopup(false)}>{t.close}</button>
                        </div>
                    </div>
                )}
         {showPopup && (
    <div className="custom-popup">
        <p>{popupMessage}</p>
        <button onClick={() => {
            setShowPopup(false);
            if (whatsappLinkToOpen) {
                window.open(whatsappLinkToOpen, "_blank");
                setWhatsappLinkToOpen(null);
            }
        }}>
            OK
        </button>
    </div>
)}


                {showDeleteConfirm && (
                    <div className="unique-id-modal-overlay" onClick={cancelDelete}>
                        <div className="popup-card" onClick={(e) => e.stopPropagation()}>
                            <h2>{t.confirmDelete}</h2>
                            <p>This action cannot be undone.</p>
                            <div className="delete-buttons">
                                <button onClick={confirmDelete}>{t.yes}</button>
                                <button onClick={cancelDelete}>{t.no}</button>
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}

export default ChildSummaryModal;
